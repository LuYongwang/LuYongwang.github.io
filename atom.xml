<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L丶lulu‘s Blog</title>
  
  <subtitle>敬往事一杯酒,再爱我也不回头🌹</subtitle>
  <link href="https://blog.yongwang.lu/atom.xml" rel="self"/>
  
  <link href="https://blog.yongwang.lu/"/>
  <updated>2023-03-21T13:40:00.000Z</updated>
  <id>https://blog.yongwang.lu/</id>
  
  <author>
    <name>L丶lulu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernetes-集群搭建</title>
    <link href="https://blog.yongwang.lu/post/kubernetes1.html"/>
    <id>https://blog.yongwang.lu/post/kubernetes1.html</id>
    <published>2023-03-21T13:40:00.000Z</published>
    <updated>2023-03-21T13:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h1><p>参考： <a href="https://kubernetes.io/zh/docs/" title="Kubernetes 文档">Kubernetes 文档</a> &#x2F; <a href="https://kubernetes.io/zh/docs/setup/" title="入门">入门</a> &#x2F; <a href="https://kubernetes.io/zh/docs/setup/production-environment/" title="生产环境">生产环境</a> &#x2F; <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/" title="使用部署工具安装 Kubernetes">使用部署工具安装 Kubernetes</a> &#x2F; <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/" title="使用 kubeadm 引导集群">使用 kubeadm 引导集群</a> &#x2F; <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" title="安装 kubeadm">安装 kubeadm</a></p><p>流程图</p><p><img src="https://res.yongwang.lu/img/image_rFtNPTs_40.png"></p><h2 id="准备开始"><a href="#准备开始" class="headerlink" title="准备开始"></a>准备开始</h2><ul><li>一台兼容的 Linux 主机。Kubernetes 项目为基于 Debian 和 Red Hat 的 Linux 发行版以及一些不提供包管理器的发行版提供通用的指令</li><li>每台机器 <code>2 GB</code> 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存)</li><li><code>2 CPU 核</code>或更多</li><li>集群中的所有机器的网络彼此均能相互连接(公网和内网都可以)</li><li>节点之中<code>不可以有重复的</code>主机名、MAC 地址或 product_uuid。请参见<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-mac-address" title="这里">这里</a>了解更多详细信息。</li><li>开启机器上的某些端口。请参见<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports" title="这里">这里</a> 了解更多详细信息。</li><li>禁用交换分区。为了保证 kubelet 正常工作，你 <strong>必须</strong> <code>禁用交换分区</code>。</li></ul><h2 id="U-确保每个节点上-MAC-地址和-product-uuid-的唯一性-amp-x20"><a href="#U-确保每个节点上-MAC-地址和-product-uuid-的唯一性-amp-x20" class="headerlink" title="U. 确保每个节点上 MAC 地址和 product_uuid 的唯一性&amp;#x20;"></a>U. 确保每个节点上 MAC 地址和 product_uuid 的唯一性&amp;#x20;</h2><ul><li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li><li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>[k8s-master|k8s-worker1|k8s-worker2]$</strong></p><ol><li>设置当前用户sudo免密[选做]<blockquote><p>不想每次都输入密码 - 加速</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存 sudo 密码</span></span><br><span class="line"><span class="built_in">echo</span> ubuntu | sudo -v -S </span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/sudoers.d/<span class="variable">$USER</span> &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">$USER ALL=(ALL) NOPASSWD: ALL</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li>使用国内镜像仓库[选做]<blockquote><p>软件安装 - 加速</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更换阿里云加速</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list_bak</span><br><span class="line">vim /etc/apt/sources.list</span><br><span class="line">查看/etc/apt/sources.list中的URL是archive.ubuntu还是cn.archive.ubuntu </span><br><span class="line">然后再执行：</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/cn.archive.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"> 或 </span><br><span class="line">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>编辑 hosts&lt;必做&gt; <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> -a /etc/hosts &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.147.131 k8s-master</span></span><br><span class="line"><span class="string">192.168.147.132 k8s-worker1</span></span><br><span class="line"><span class="string">192.168.147.133 k8s-worker2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>[k8s-master|k8s-worker1|k8s-worker2]$</strong></p><ol><li><p>禁用 swap&lt;必做&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换文件</span></span><br><span class="line">SWAPF=$(awk <span class="string">&#x27;/swap/ &#123;print $1&#125;&#x27;</span> /etc/fstab)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即禁用</span></span><br><span class="line">sudo swapoff <span class="variable">$SWAPF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久禁用</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;/swap/d&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除交换文件</span></span><br><span class="line">sudo <span class="built_in">rm</span> <span class="variable">$SWAPF</span></span><br></pre></td></tr></table></figure></li><li><p>模块支持&lt;必做&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt -y install bridge-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内核支持</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/sysctl.d/k8s.conf &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line">sudo sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure></li><li><p>安装运行时&lt;必做&gt;&amp;#x20;</p><p>这里不再采用docker作为k8s的运行时. 因为K8s自1.24 对docker支持改为 安装指定CRI才能访问.&amp;#x20;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 containerd https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/</span></span><br><span class="line"><span class="comment"># 下载最新版本 containerd 因为在k8s后续版本废弃1.5.x 安装对应的deb版本</span></span><br><span class="line">sudo apt install -y containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁定版本</span></span><br><span class="line">sudo apt-mark hold containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /etc/containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成默认配置文件</span></span><br><span class="line">containerd config default | \</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/containerd/config.toml &gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件 加速</span></span><br><span class="line">sudo sed -i \</span><br><span class="line">-e <span class="string">&#x27;/sandbox_image/s?k8s.gcr.io?registry.aliyuncs.com/google_containers?&#x27;</span> \</span><br><span class="line">-e <span class="string">&#x27;/SystemdCgroup/s?false?true?&#x27;</span> \</span><br><span class="line">-e <span class="string">&#x27;/registry.mirrors/a\        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]&#x27;</span> \</span><br><span class="line">-e <span class="string">&#x27;/registry.mirrors/a\          endpoint = [&quot;https://docker.nju.edu.cn/&quot;]&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务重启</span></span><br><span class="line">sudo systemctl restart containerd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行时配置私服</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">          endpoint = [<span class="string">&quot;https://------.mirror.aliyuncs.com&quot;</span>, <span class="string">&quot;https://registry-1.docker.io&quot;</span>]</span><br><span class="line"><span class="comment"># 运行时配置登录</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">   [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">       [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">          endpoint = [<span class="string">&quot;https://registry-1.docker.io&quot;</span>]</span><br><span class="line">       [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span>]</span><br><span class="line">          endpoint = [<span class="string">&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;</span>]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.configs]</span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.configs.<span class="string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span>.tls]</span><br><span class="line">          insecure_skip_verify = <span class="literal">true</span></span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.configs.<span class="string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span>.auth]</span><br><span class="line">          username = <span class="string">&quot;阿里云账户，类似xxx@aliyun.com&quot;</span></span><br><span class="line">          password = <span class="string">&quot;上一步设置的固定密码&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="安装-K8s"><a href="#安装-K8s" class="headerlink" title="安装 K8s"></a>安装 K8s</h2><p><strong>[kiosk@k8s-master|k8s-worker1|k8s-worker2]$</strong></p><ol><li>安装 kubeadm、kubelet 和 kubectl<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 apt 包索引并安装使用 Kubernetes apt 仓库所需要的包</span></span><br><span class="line">sudo apt -y install apt-transport-https ca-certificates curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Google Cloud 公开签名秘钥</span></span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Kubernetes apt 仓库</span></span><br><span class="line">MIRROR_URL=https://mirrors.aliyun.com/kubernetes/apt/</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">deb $MIRROR_URL kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 apt 包索引</span></span><br><span class="line">sudo <span class="built_in">cp</span> /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d</span><br><span class="line">sudo apt update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询指定版本</span></span><br><span class="line">sudo apt-cache madison kubelet | grep 1.25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 kubelet、kubeadm 和 kubectl 指定版本</span></span><br><span class="line">sudo apt install -y kubelet=1.25.1-00 kubeadm=1.25.1-00 kubectl=1.25.1-00</span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁定版本</span></span><br><span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装完K8s以后会自带crictl</span></span><br><span class="line"><span class="comment"># crictl 配置文件</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/crictl.yaml &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">runtime-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">image-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">timeout: 10</span></span><br><span class="line"><span class="string">debug: false</span></span><br><span class="line"><span class="string">pull-image-on-create: true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li>k8s 支持<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加 k8s 支持</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;/ExecStart=\//s|$| --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd|&#x27;</span> \</span><br><span class="line">  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 kubelet 服务</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart kubelet</span><br></pre></td></tr></table></figure></li></ol><p><strong>[k8s-master]$</strong></p><ol><li>初始化<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成初始文件</span></span><br><span class="line">sudo kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">NICP=$(ip a | awk <span class="string">&#x27;/inet / &#123;print $2&#125;&#x27;</span> | grep -v ^127 | sed <span class="string">&#x27;s+/24++&#x27;</span>)</span><br><span class="line">sudo sed -i \</span><br><span class="line">  -e <span class="string">&quot;/advertiseAddress/s?:.*?: <span class="variable">$NICP</span>?&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;/name/s?:.*?: <span class="subst">$(hostname -s)</span>?&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;/clusterName/s?:.*?: k8s?&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;/imageRepository/s?:.*?: registry.aliyuncs.com/google_containers?&quot;</span> kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用初始文件，初始化集群</span></span><br><span class="line">sudo kubeadm init --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><blockquote><p>Your Kubernetes control-plane has initialized <code>successfully</code>!<br>PS: 普通用户管理集群</p><p>To start using your cluster, you need to run the following as a regular user:<br>bash<br>mkdir -p $HOME&#x2F;.kube<br>sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config<br>sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</p><p>PS：root 用户管理集群</p><p>Alternatively, if you are the root user, you can run:</p><p>bash<br>export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</p><p>You should now deploy a pod network to the cluster.Run “<code>kubectl apply -f [podnetwork].yaml</code>“ with one of the options listed at:<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/" title="https://kubernetes.io/docs/concepts/cluster-administration/addons/">https://kubernetes.io/docs/concepts/cluster-administration/addons/</a><br>Then you can join any number of worker nodes by running the following on each as root:<br>bash<br>kubeadm join 192.168.147.128:6443 –token abcdef.0123456789abcdef –discovery-token-ca-cert-hash sha256:c4781194de65ebb47984fc5e7e64d4897875410825ce4d18df81da1a298afa1f</p></blockquote></li><li>配置文件 - Client<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"></span><br><span class="line"><span class="comment"># user 复制配置文件</span></span><br><span class="line">sudo \<span class="built_in">cp</span> /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># root 变量</span></span><br><span class="line">sudo <span class="built_in">tee</span> -a ~root/.bashrc &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">export KUBECONFIG=/etc/kubernetes/admin.conf</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li>创建网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure></li><li>命令补全 - Client[建议]<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl completion --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.kube 2&gt;/dev/null</span><br><span class="line">kubectl completion bash &gt; ~/.kube/completion.bash.inc</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string"># Kubectl shell completion</span></span><br><span class="line"><span class="string">source &#x27;<span class="variable">$HOME</span>/.kube/completion.bash.inc&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> &gt;&gt; <span class="variable">$HOME</span>/.bashrc</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.bashrc</span><br></pre></td></tr></table></figure></li><li>命令别名 - Client[建议]<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网址 https://kubernetes.io/zh-cn/docs/reference/kubectl/cheatsheet/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line"><span class="built_in">tee</span> -a <span class="variable">$HOME</span>/.bashrc &gt;/dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">alias k=&#x27;kubectl&#x27;</span></span><br><span class="line"><span class="string">complete -F __start_kubectl k</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p><strong>[k8s-worker1|k8s-worker2]$</strong></p><ol><li>加入集群<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo \</span><br><span class="line">  kubeadm <span class="built_in">join</span> 192.168.147.128:6443 \</span><br><span class="line">  --token abcdef.0123456789abcdef \</span><br><span class="line">  --discovery-token-ca-cert-hash sha256:c4781194de65ebb47984fc5e7e64d4897875410825ce4d18df81da1a298afa1f</span><br></pre></td></tr></table></figure></li></ol><h2 id="C-确认环境正常"><a href="#C-确认环境正常" class="headerlink" title="C. 确认环境正常"></a>C. 确认环境正常</h2><p><strong>[k8s-master]</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br><span class="line">NAME          STATUS     ROLES           AGE     VERSION</span><br><span class="line">k8s-master   `Ready`     control-plane   9m17s   `v1.25.1`</span><br><span class="line">k8s-worker1  `Ready`     &lt;none&gt;          90s     `v1.25.1`</span><br><span class="line">k8s-worker2  `Ready`     &lt;none&gt;          51s     `v1.25.1`</span><br><span class="line"></span><br><span class="line">$ kubectl get componentstatuses</span><br><span class="line">Warning: v1 ComponentStatus is deprecated <span class="keyword">in</span> v1.19+</span><br><span class="line">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class="line">scheduler           `Healthy`  ok</span><br><span class="line">controller-manager  `Healthy`  ok</span><br><span class="line">etcd-0              `Healthy`  &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>,<span class="string">&quot;reason&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ kubectl -n kube-system get pod -w</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-798cc86c47-dkdjl   1/1     Running   0          4m5s</span><br><span class="line">calico-node-ftwk8                          1/1     Running   0          4m5s</span><br><span class="line">calico-node-hstcg                          1/1     Running   0          109s</span><br><span class="line">calico-node-lcnw6                          1/1     Running   0          2m28s</span><br><span class="line">coredns-c676cc86f-mxpb8                    1/1     Running   0          10m</span><br><span class="line">coredns-c676cc86f-vhzzh                    1/1     Running   0          10m</span><br><span class="line">etcd-k8s-master                            1/1     Running   0          10m</span><br><span class="line">kube-apiserver-k8s-master                  1/1     Running   0          10m</span><br><span class="line">kube-controller-manager-k8s-master         1/1     Running   0          10m</span><br><span class="line">kube-proxy-g2tz9                           1/1     Running   0          109s</span><br><span class="line">kube-proxy-j4fgc                           1/1     Running   0          10m</span><br><span class="line">kube-proxy-nz8vj                           1/1     Running   0          2m28s</span><br><span class="line">kube-scheduler-k8s-master                  1/1     Running   0          10m</span><br><span class="line">&lt;Ctrl-C&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">kubernetes1.26</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.yongwang.lu/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.yongwang.lu/tags/kubernetes/"/>
    
  </entry>
  
</feed>
